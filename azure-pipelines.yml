trigger:
  branches:
    include:
      - main  # Trigger on pushes to the main branch

pool:
  name: 'SelfHostedAgentPool'  # Make sure this matches your self-hosted pool name

variables:
  buildConfiguration: 'Release'

steps:

# Step 1: Checkout the code from your GitHub repository
- checkout: self
  displayName: 'Checkout Code'

# Step 2: Cache NuGet packages to speed up builds
- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/*.csproj'
    restoreKeys: |
      nuget | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.nuget/packages
    cacheHitVar: NUGET_CACHE_RESTORED
  displayName: 'Cache NuGet Packages'

# Step 3: Setup .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'  # Use .NET 8.x SDK
  displayName: 'Setup .NET SDK'

# Step 4: Install .NET MAUI workloads
- script: |
    dotnet workload install maui
  displayName: 'Install .NET MAUI Workload'

# Step 5: Install Node.js (since you're using npm/Appium)
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# Step 6: Install Appium globally using npm
- script: |
    npm install -g appium
  displayName: 'Install Appium'

# Step 7: Check if Appium Windows Driver is installed and update only if necessary
- powershell: |
    $installedDrivers = appium driver list --installed
    if ($installedDrivers -match 'windows@') {
      Write-Host "Appium Windows Driver is already installed."
      Write-Host "Updating Appium Windows Driver..."
      appium driver update windows  # Optionally update the driver
    } else {
      Write-Host "Installing Appium Windows Driver..."
      appium driver install --source=npm appium-windows-driver
    }
  displayName: 'Check and Update Appium Windows Driver'

# Step 8: Install WinAppDriver for Windows UI automation

# Step 9: Build the .NET MAUI project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'  # Modify the path if necessary
    arguments: '--configuration $(buildConfiguration) --no-restore'
  displayName: 'Build .NET MAUI Project'

# Step 10: Run NUnit Tests
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*.Test.csproj'  # Replace with the path to your NUnit test project
    arguments: '--configuration $(buildConfiguration) --no-build --logger trx'
  displayName: 'Run NUnit Tests'

# Step 11: Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TestResults/*.trx'
    testRunTitle: 'NUnit Test Results'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'
