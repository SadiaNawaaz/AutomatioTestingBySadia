trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'


steps:
  # Step 1: Checkout the code
  - checkout: self
    persistCredentials: true


  # Step 2: Cache .NET dependencies (NuGet packages)
  - task: Cache@2
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/*.csproj'
      restoreKeys: |
        nuget | "$(Agent.OS)"
      path: $(Agent.ToolsDirectory)/nuget
    displayName: 'Cache NuGet packages'

  # Step 3: Setup .NET SDK
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.x'
    displayName: 'Setup .NET SDK'

  # Step 4: Install MAUI workload
  - script: dotnet workload install maui
    displayName: 'Install MAUI workload'

  # Step 5: Cache Node.js dependencies (npm packages)
  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | **/package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(Agent.ToolsDirectory)/npm
    displayName: 'Cache Node.js modules'

  # Step 6: Install Node.js
  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  # Step 7: Install Appium via npm
  - script: npm install -g appium
    displayName: 'Install Appium'

  # Step 8: Install Appium Windows Driver
  - script: appium driver install --source=npm appium-windows-driver
    displayName: 'Install Appium Windows Driver'

  # Step 9: Install WinAppDriver for Windows UI automation
  - powershell: |
      Invoke-WebRequest -Uri https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi -OutFile WinAppDriver.msi
      Start-Process msiexec.exe -Wait -ArgumentList '/I WinAppDriver.msi /quiet'
    displayName: 'Install WinAppDriver'

  # Step 10: Build the .NET MAUI Project for Windows
  - script: dotnet build Yaml/Yaml.csproj -c Release -f:net8.0-windows10.0.19041.0
    displayName: 'Build .NET MAUI Project'

  # Step 11: Run specific test cases (use filter to run fast tests only)
  - script: dotnet test UITests.Windows/UITests.Windows.csproj --logger trx
    displayName: 'Run Specific Tests'

  # Step 12: Publish test results
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/TestResults/*.trx'
    displayName: 'Publish Test Results'
