trigger:
  branches:
    include:
      - main  # Trigger on pushes to the main branch

pool:
  name: 'SelfHostedAgentPool'  # Make sure this matches your self-hosted pool name

variables:
  buildConfiguration: 'Release'

steps:

# Step 1: Checkout the code from your GitHub repository
- checkout: self
  displayName: 'Checkout Code'

# Step 2: Cache NuGet packages to speed up builds
- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/*.csproj'
    restoreKeys: |
      nuget | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.nuget/packages
    cacheHitVar: NUGET_CACHE_RESTORED
  displayName: 'Cache NuGet Packages'

# Step 3: Setup .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'  # Use .NET 8.x SDK
  displayName: 'Setup .NET SDK'

# Step 4: Install .NET MAUI workloads
- script: |
    dotnet workload install maui
  displayName: 'Install .NET MAUI Workload'

# Step 5: Check if Node.js is installed and install if missing
- powershell: |
    if (!(Get-Command node -ErrorAction SilentlyContinue)) {
      Write-Host "Node.js is not installed. Installing..."
      nvm install 18.x  # Replace with Node.js installer if not using NVM
    } else {
      Write-Host "Node.js is already installed."
    }
  displayName: 'Check and Install Node.js'

# Step 6: Check if Appium is installed and install only if missing
- powershell: |
    if (!(Get-Command appium -ErrorAction SilentlyContinue)) {
      npm install -g appium
      Write-Host "Appium installed."
    } else {
      Write-Host "Appium is already installed."
    }
  displayName: 'Check and Install Appium'

# Step 7: Check if Appium Windows Driver is installed and install only if missing
- powershell: |
    if (!(appium driver list --installed | Select-String "appium-windows-driver")) {
      appium driver install --source=npm appium-windows-driver
      Write-Host "Appium Windows Driver installed."
    } else {
      Write-Host "Appium Windows Driver is already installed."
    }
  displayName: 'Check and Install Appium Windows Driver'

# Step 8: Check if WinAppDriver is installed and install only if missing
- powershell: |
    if (-Not (Test-Path "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe")) {
      Invoke-WebRequest -Uri https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi -OutFile WinAppDriver.msi
      Start-Process msiexec.exe -Wait -ArgumentList '/I WinAppDriver.msi /quiet'
      Write-Host "WinAppDriver installed."
    } else {
      Write-Host "WinAppDriver is already installed."
    }
  displayName: 'Check and Install WinAppDriver'

# Step 9: Build the .NET MAUI project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'  # Modify the path if necessary
    arguments: '--configuration $(buildConfiguration) --no-restore'
  displayName: 'Build .NET MAUI Project'

# Step 10: Run NUnit Tests
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*.Test.csproj'  # Replace with the path to your NUnit test project
    arguments: '--configuration $(buildConfiguration) --no-build --logger trx'
  displayName: 'Run NUnit Tests'

# Step 11: Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TestResults/*.trx'
    testRunTitle: 'NUnit Test Results'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'
